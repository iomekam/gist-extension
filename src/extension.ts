import * as vscode from 'vscode';
import OctokitClient from './oktokit';

export function activate(context: vscode.ExtensionContext) {
  let disposable = vscode.commands.registerCommand('gist-uploader.createGist', async () => {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
      vscode.window.showErrorMessage("No active text editor found");
      return;
    }

    let highlightedText = editor.document.getText(); // Default to entire fi;e if selection not given

		const selection = editor.selection;
    if (!selection.isEmpty) {
      highlightedText = editor.document.getText(selection);
    }

		const config = vscode.workspace.getConfiguration('gist-uploader');
		const pat: String = config.get('githubPAT') || "";
    const octokitClient = new OctokitClient(pat);

		if (pat === "") {
			vscode.window.showErrorMessage(`No GitHub Personal Access Token given`);
			return;
		}

    try {
      const gist = await octokitClient.createGist(
				highlightedText,
        "Autogenerated from VSCode",
        true);
      vscode.env.clipboard.writeText(gist.html_url);
      vscode.window.showInformationMessage(`Gist created: ${gist.html_url} (URL copied to clipboard)`);
    } catch (error) {
      vscode.window.showErrorMessage(`Error creating Gist`);
    }
  });

  context.subscriptions.push(disposable);

  // Register the context menu item to appear when selecting text
  context.subscriptions.push(vscode.commands.registerTextEditorCommand('gist-uploader.addCreateGistOptionToContextMenu', (textEditor: vscode.TextEditor, textEditorEdit: vscode.TextEditorEdit, ...args: any[]) => {
    const selectedText = textEditor.document.getText(textEditor.selection);
    if (selectedText) {
      vscode.window.showTextDocument(textEditor.document).then(() => {
        vscode.commands.executeCommand('editor.action.showContextMenu', {
          getActions: () => [
            {
              label: 'Create Gist',
              command: 'gist-uploader.createGist',
              arguments: [selectedText]
            }
          ]
        });
      });
    }
  }));
}

export function deactivate() {}
